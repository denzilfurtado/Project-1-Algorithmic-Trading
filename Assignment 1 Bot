from fmclient import Agent
from fmclient import Order, OrderType, OrderSide, Holding
import copy


class FMBot(Agent):
    """
    This is a very simple "Hello World" agent!
    """
    def __init__(self, account, email, password, marketplace_id):
        name = "Furtado_Bot"
        super().__init__(account, email, password, marketplace_id,
                         name=name)
        self.description = "This is a bot for the induced demand and supply experiment"

    def initialised(self):
        for market_id, market_info in self.markets.items():
            market_item = market_info["item"]
            print("I can trade " + str(market_item) +
                  " by sending orders with market ID " + str(market_id))

    def received_order_book(self, order_book, market_id):
        print("Market " + str(market_id))
        for order in order_book:
            print("Order price " + str(order.price))
            print("Number of units " + str(order.units))
            if order.side == OrderSide.SELL:
                if order.price < per_unit_reward:
                    potential_profit = per_unit_reward - order.price
                    self.inform("This is a profitable trading opportunity. "
                                "I will react to the sell order for " + str(order.units)
                                + " units with price $" + str(order.price)
                                + " per unit by sending a buy order for " + str(order.units)
                                + " at the price of $" + str(order.price)
                                + " per unit. I will stand to make $" + str(potential_profit)
                                + " of profit per unit.")
                else:
                    print("Sell order")
            else:
                if order.price > per_unit_charge:
                    potential_profit = order.price - per_unit_charge
                    self.inform("This is a profitable trading opportunity. "
                                "I will react to the buy order for " + str(order.units)
                                + " units with price $" + str(order.price)
                                + " per unit by sending a sell order for " + str(order.units)
                                + " at the price of $" + str(order.price)
                                + " per unit. I will stand to make $" + str(potential_profit)
                                + " of profit per unit.")

                else:
                    print("Buy order")
            print("Date " + str(order.date))
            if order.mine:
                print("This is my order!")

    def received_holdings(self, holdings):
        cash_holdings = holdings["cash"]
        print("Total cash: " + str(cash_holdings["cash"])
              + "available cash: " + str(cash_holdings["available_cash"]))

        for market_id, market_holding in holdings["markets"].items():
            print("Market " + str(market_id) +
                  " total units: " + str(market_holding["units"]) +
                  ", available units: " + str(market_holding["available_units"]))

    def received_marketplace_info(self, marketplace_info):
        session_id = marketplace_info["session_id"]
        if marketplace_info["status"]:
            print("Marketplace is now open with session ID " + str(session_id))
        else:
            print("Marketplace is now closed.")

    def received_completed_orders(self, orders, market_id=None):
        print("Market " + str(market_id))
        for order in orders:
            print("Order price " + str(order.price))
            print("Number of units " + str(order.units))
            if order.side == OrderSide.SELL:
                print("Sell order")
            else:
                print("Buy order")
            print("Date " + str(order.date))
            if order.mine:
                print("This is my order!")

    def order_accepted(self, order):
        self.inform("Order accepted: " + str(order))

    def order_rejected(self, info, order):
        if info == "ORDER_INVALID":
            print("Order invalid")
        elif info == "ORDER_INSUFFICIENT_ASSETS":
            print("Insufficient assets to place order")

    def run(self):
        self.initialise()
        self.start()

# Script parameters
per_unit_reward = 5
per_unit_charge = 6

# Print out the following:
# "I will react to the  <Buy/Sell> order for <X> units
# with price <p> and id <id> by sending a <Buy/Sell> order for <X1> units with price <p1>"

if __name__ == "__main__":
    marketplace_id = 72
    fm_bot = FMBot("durable-guard", "d.furtado@student.unimelb.edu.au", "cHiaDOan", marketplace_id)
    fm_bot.run()
